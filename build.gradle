/*
 * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://palantir.bintray.com/releases" }
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:13.2.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:1.17.1'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.11.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:2.2.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:1.11.2'
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.7"
    }
}

apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'

repositories {
    jcenter()
    maven { url  "http://palantir.bintray.com/releases" }
}

allprojects {
    version gitVersion()
    group 'com.palantir.tracing'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: "org.inferred.processors"

    repositories {
        jcenter()
        maven { url "http://palantir.bintray.com/releases" }
    }

    sourceCompatibility = 1.8

    tasks.withType(Javadoc) {
        // suppress Javadoc doclint warnings in Java 8+
        if (!System.getProperty("java.version").startsWith("1.7")) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    tasks.check.dependsOn(javadoc)

    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Xlint:deprecation', '-Werror']
        options.errorprone.disableWarningsInGeneratedCode = true
        options.errorprone.errorproneArgs += [
            '-Werror',
            '-Xlint:deprecation',
            '-Xlint:unchecked',
            '-XepDisableWarningsInGeneratedCode',
            '-XepExcludedPaths:.*(generated).*',
        ]
    }
}
